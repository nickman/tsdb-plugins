-- ====================================================================
-- tsdb-sqlcatalog Table Triggers for Postgres
-- Whitehead, 2013
-- ====================================================================


-- ====================================================================
--  TSD_METRIC
-- ====================================================================

CREATE OR REPLACE FUNCTION TSD_METRIC_UPDATED_TRG() RETURNS trigger AS $TSD_METRIC_UPDATED_TRG$
    DECLARE
	EQ boolean;
    BEGIN
	IF is_sqprocessor() THEN
		IF TG_OP='DELETE' THEN
			RETURN OLD;
		END IF;
		RETURN NEW;
	END IF;
	EQ := is_eqprocessor();
	IF TG_OP='INSERT' THEN
		IF EQ != true THEN
			IF NEW.VERSION IS NULL THEN
				NEW.VERSION := 1;
			ELSE
				NEW.VERSION := NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'I');
	ELSEIF TG_OP='DELETE' THEN
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'D');
	ELSEIF TG_OP='UPDATE' THEN
		IF EQ != true THEN
			IF NEW.VERSION IS NULL THEN
				NEW.VERSION := 1;
			ELSE
				NEW.VERSION := NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'U');
	END IF;
	RETURN NEW;
    END;
$TSD_METRIC_UPDATED_TRG$ LANGUAGE plpgsql;

CREATE TRIGGER TSD_METRIC_UPDATED_TRG BEFORE INSERT OR UPDATE OR DELETE ON TSD_METRIC
    FOR EACH ROW EXECUTE PROCEDURE TSD_METRIC_UPDATED_TRG();
    
-- ====================================================================
--  TSD_TAGK
-- ====================================================================
CREATE OR REPLACE FUNCTION TSD_TAGK_UPDATED_TRG() RETURNS trigger AS $TSD_TAGK_UPDATED_TRG$
    DECLARE
	EQ boolean;
    BEGIN
	IF is_sqprocessor() THEN
		IF TG_OP='DELETE' THEN
			RETURN OLD;
		END IF;
		RETURN NEW;
	END IF;
	EQ := is_eqprocessor();
	IF TG_OP='INSERT' THEN
		IF EQ != true THEN
			IF NEW.VERSION IS NULL THEN
				NEW.VERSION := 1;
			ELSE
				NEW.VERSION := NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'I');
	ELSEIF TG_OP='DELETE' THEN
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'D');
	ELSEIF TG_OP='UPDATE' THEN
		IF EQ != true THEN
			IF NEW.VERSION IS NULL THEN
				NEW.VERSION := 1;
			ELSE
				NEW.VERSION := NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'U');
	END IF;
	RETURN NEW;
    END;
$TSD_TAGK_UPDATED_TRG$ LANGUAGE plpgsql;

CREATE TRIGGER TSD_TAGK_UPDATED_TRG BEFORE INSERT OR UPDATE OR DELETE ON TSD_TAGK
    FOR EACH ROW EXECUTE PROCEDURE TSD_TAGK_UPDATED_TRG();
    
    
-- ====================================================================
--  TSD_TAGV
-- ====================================================================

CREATE OR REPLACE FUNCTION TSD_TAGV_UPDATED_TRG() RETURNS trigger AS $TSD_TAGV_UPDATED_TRG$
    DECLARE
	EQ boolean;
    BEGIN
	IF is_sqprocessor() THEN
		IF TG_OP='DELETE' THEN
			RETURN OLD;
		END IF;
		RETURN NEW;
	END IF;
	EQ := is_eqprocessor();
	IF TG_OP='INSERT' THEN
		IF EQ != true THEN
			IF NEW.VERSION IS NULL THEN
				NEW.VERSION := 1;
			ELSE
				NEW.VERSION := NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'I');
	ELSEIF TG_OP='DELETE' THEN
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'D');
	ELSEIF TG_OP='UPDATE' THEN
		IF EQ != true THEN
			IF NEW.VERSION IS NULL THEN
				NEW.VERSION := 1;
			ELSE
				NEW.VERSION := NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'U');
	END IF;
	RETURN NEW;
    END;
$TSD_TAGV_UPDATED_TRG$ LANGUAGE plpgsql;

CREATE TRIGGER TSD_TAGV_UPDATED_TRG BEFORE INSERT OR UPDATE OR DELETE ON TSD_TAGV
    FOR EACH ROW EXECUTE PROCEDURE TSD_TAGV_UPDATED_TRG();    
    
-- ====================================================================
--  TSD_ANNOTATION
-- ====================================================================
CREATE OR REPLACE FUNCTION TSD_ANNOTATION_UPDATED_TRG() RETURNS trigger AS $TSD_ANNOTATION_UPDATED_TRG$
    DECLARE
	EQ boolean;
    BEGIN
	IF is_sqprocessor() THEN
		IF TG_OP='DELETE' THEN
			RETURN OLD;
		END IF;
		RETURN NEW;
	END IF;
	EQ := is_eqprocessor();
	IF TG_OP='INSERT' THEN
		IF EQ != true THEN
			IF NEW.VERSION IS NULL THEN
				NEW.VERSION := 1;
			ELSE
				NEW.VERSION := NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'I');
	ELSEIF TG_OP='DELETE' THEN
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'D');
	ELSEIF TG_OP='UPDATE' THEN
		IF EQ != true THEN
			IF NEW.VERSION IS NULL THEN
				NEW.VERSION := 1;
			ELSE
				NEW.VERSION := NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'U');
	END IF;
	RETURN NEW;
    END;
$TSD_ANNOTATION_UPDATED_TRG$ LANGUAGE plpgsql;

CREATE TRIGGER TSD_ANNOTATION_UPDATED_TRG BEFORE INSERT OR UPDATE OR DELETE ON TSD_ANNOTATION
    FOR EACH ROW EXECUTE PROCEDURE TSD_ANNOTATION_UPDATED_TRG();

    
-- ====================================================================
--  TSD_TSMETA
-- ====================================================================
    
CREATE OR REPLACE FUNCTION TSD_TSMETA_UPDATED_TRG() RETURNS trigger AS $TSD_TSMETA_UPDATED_TRG$
    DECLARE
	EQ boolean;
    BEGIN
	IF is_sqprocessor() THEN
		IF TG_OP='DELETE' THEN
			RETURN OLD;
		END IF;
		RETURN NEW;
	END IF;
	EQ := is_eqprocessor();
	IF TG_OP='INSERT' THEN
		IF EQ != true THEN
			IF NEW.VERSION IS NULL THEN
				NEW.VERSION := 1;
			ELSE
				NEW.VERSION := NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'I');
	ELSEIF TG_OP='DELETE' THEN
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'D');
	ELSEIF TG_OP='UPDATE' THEN
		IF EQ != true THEN
			IF NEW.VERSION IS NULL THEN
				NEW.VERSION := 1;
			ELSE
				NEW.VERSION := NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (EVENT_TYPE, EVENT, OP_TYPE) VALUES (UPPER(TG_TABLE_NAME),NEW.XUID,'U');
	END IF;
	RETURN NEW;
    END;
$TSD_TSMETA_UPDATED_TRG$ LANGUAGE plpgsql;

CREATE TRIGGER TSD_TSMETA_UPDATED_TRG BEFORE INSERT OR UPDATE OR DELETE ON TSD_TSMETA
    FOR EACH ROW EXECUTE PROCEDURE TSD_TSMETA_UPDATED_TRG();
    