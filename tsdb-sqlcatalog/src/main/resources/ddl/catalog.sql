-- ====================================================================
-- tsdb-sqlcatalog DDL
-- Whitehead, 2013
-- TODO:  TSDMain Attributes, Last Change Timestamp, Annotation Table, 
-- Delete Cascade RI FKs.  e.g. FOREIGN KEY(ID) REFERENCES TEST(ID) ON DELETE CASCADE
-- ====================================================================

-- ===========================================================================================
--  The Sequence driving the FQN key
-- ===========================================================================================
CREATE SEQUENCE IF NOT EXISTS FQN_SEQ START WITH 0 INCREMENT BY @FQN_SEQ_SIZE;
ALTER SEQUENCE FQN_SEQ INCREMENT BY @FQN_SEQ_SIZE;
-- ===========================================================================================

CREATE TABLE IF NOT EXISTS TSD_TAGK (
    UID CHAR(6) NOT NULL COMMENT 'The tag key UID as a hex encoded string',
    NAME VARCHAR2(60) NOT NULL COMMENT 'The name of the UID object',
    CREATED TIMESTAMP NOT NULL COMMENT '',
    DESCRIPTION VARCHAR2(120) COMMENT '',
    DISPLAY_NAME VARCHAR2(60) COMMENT '',
    NOTES VARCHAR2(120) COMMENT '',
    CUSTOM VARCHAR2(120) COMMENT ''    
); COMMENT ON TABLE TSD_TAGK IS 'Table storing distinct time-series tag keys';

CREATE UNIQUE INDEX IF NOT EXISTS TSD_TAGK_AK ON TSD_TAGK (NAME ASC);
ALTER TABLE TSD_TAGK ADD CONSTRAINT IF NOT EXISTS TSD_TAGK_PK PRIMARY KEY ( UID ) ;

CREATE TABLE IF NOT EXISTS TSD_TAGV (
    UID CHAR(6) NOT NULL COMMENT '' ,
    NAME VARCHAR2(60) NOT NULL COMMENT '',
    CREATED TIMESTAMP NOT NULL COMMENT '',
    DESCRIPTION VARCHAR2(120) COMMENT '',
    DISPLAY_NAME VARCHAR2(60) COMMENT '',
    NOTES VARCHAR2(120) COMMENT '',
    CUSTOM VARCHAR2(120) COMMENT ''    
); COMMENT ON TABLE TSD_TAGV IS 'Table storing distinct time-series tag values';

CREATE UNIQUE INDEX IF NOT EXISTS TSD_TAGV_AK ON TSD_TAGV (NAME ASC);
ALTER TABLE TSD_TAGV ADD CONSTRAINT IF NOT EXISTS TSD_TAGV_PK PRIMARY KEY ( UID ) ;

CREATE TABLE IF NOT EXISTS TSD_METRIC (
    UID CHAR(6) NOT NULL COMMENT '' ,
    NAME VARCHAR2(60) NOT NULL COMMENT '',
    CREATED TIMESTAMP NOT NULL COMMENT '',
    DESCRIPTION VARCHAR2(120) COMMENT '',
    DISPLAY_NAME VARCHAR2(60) COMMENT '',
    NOTES VARCHAR2(120) COMMENT '',
    CUSTOM VARCHAR2(120) COMMENT ''    
); COMMENT ON TABLE TSD_TAGK IS 'Table storing distinct time-series metric names';

CREATE UNIQUE INDEX IF NOT EXISTS TSD_METRIC_AK ON TSD_METRIC (NAME ASC);
ALTER TABLE TSD_METRIC ADD CONSTRAINT IF NOT EXISTS TSD_METRIC_PK PRIMARY KEY ( UID ) ;


CREATE TABLE IF NOT EXISTS TSD_TAGPAIR (
	UID CHAR(12) NOT NULL COMMENT '',
	TAGK CHAR(6) NOT NULL REFERENCES TSD_TAGK(UID) COMMENT '',
	TAGV CHAR(6) NOT NULL REFERENCES TSD_TAGV(UID) COMMENT '',
	NAME  VARCHAR2(120) NOT NULL COMMENT ''
);


CREATE UNIQUE INDEX IF NOT EXISTS TSD_TAGPAIR_AK ON TSD_TAGPAIR (TAGK ASC, TAGV ASC);
CREATE INDEX IF NOT EXISTS TSD_TAGPAIR_K_IDX ON TSD_TAGPAIR (TAGK ASC);
CREATE INDEX IF NOT EXISTS TSD_TAGPAIR_V_IDX ON TSD_TAGPAIR (TAGV ASC);
CREATE INDEX IF NOT EXISTS TSD_TAGPAIR_NAME_IDX ON TSD_TAGPAIR (NAME ASC);


ALTER TABLE TSD_TAGPAIR ADD CONSTRAINT IF NOT EXISTS TSD_TAGPAIR_PK PRIMARY KEY ( UID ) ;

CREATE TABLE IF NOT EXISTS TSD_FQN_TAGPAIR (
	FQN_TP_ID BIGINT NOT NULL IDENTITY COMMENT 'Synthetic primary key of an association between an FQN and a Tag Pair',
	FQNID BIGINT NOT NULL COMMENT 'The ID of the parent FQN',
	UID CHAR(12) NOT NULL COMMENT 'The ID of a child tag key/value pair',
	PORDER TINYINT NOT NULL COMMENT 'The order of the tags in the FQN'
); COMMENT ON TABLE TSD_FQN_TAGPAIR IS 'Associative table between TSD_FQN and TSD_TAGPAIR, or the TSMeta and the Tag keys and values of the UIDMetas therein';

CREATE UNIQUE INDEX IF NOT EXISTS TSD_FQN_TAGPAIR_AK ON TSD_FQN_TAGPAIR (FQN_TP_ID);
CREATE UNIQUE INDEX IF NOT EXISTS TSD_FQN_TAGPAIR_IND ON TSD_FQN_TAGPAIR (FQNID, UID, PORDER);
ALTER TABLE TSD_FQN_TAGPAIR ADD CONSTRAINT IF NOT EXISTS TSD_FQN_TAGPAIR_FK FOREIGN KEY(UID) REFERENCES TSD_TAGPAIR ( UID );

CREATE TABLE IF NOT EXISTS TSD_FQN (
	FQNID BIGINT NOT NULL COMMENT 'A synthetic unique identifier for each individual TSMeta/TimeSeries entry',
	METRIC_UID CHAR(6) NOT NULL COMMENT 'The unique identifier of the metric name associated with this TSMeta',
	FQN VARCHAR(4000) NOT NULL COMMENT 'The fully qualified metric name',
	TSUID VARCHAR(120) NOT NULL COMMENT 'The TSUID as a hex encoded string'
); COMMENT ON TABLE TSD_FQN IS 'Table storing each distinct time-series TSMeta and its attributes';

ALTER TABLE TSD_FQN ADD CONSTRAINT IF NOT EXISTS TSD_FQN_PK PRIMARY KEY ( FQNID ) ;
CREATE UNIQUE INDEX IF NOT EXISTS TSD_FQN_AK ON TSD_FQN (FQNID);
CREATE UNIQUE INDEX IF NOT EXISTS TSD_FQN_TSUID_AK ON TSD_FQN (TSUID);
CREATE UNIQUE INDEX IF NOT EXISTS TSD_FQN_FQN_AK ON TSD_FQN (FQN);
ALTER TABLE TSD_FQN_TAGPAIR ADD CONSTRAINT IF NOT EXISTS TSD_FQN_TAGPAIR_FQNID_FK FOREIGN KEY(FQNID) REFERENCES TSD_FQN ( FQNID );
ALTER TABLE TSD_FQN ADD CONSTRAINT IF NOT EXISTS TSD_FQN_METRIC_FK FOREIGN KEY(METRIC_UID) REFERENCES TSD_METRIC ( UID );

-- ==============================================================================================
--  User Defined Functions
-- ==============================================================================================


CREATE ALIAS IF NOT EXISTS TAGVNAME FOR "net.opentsdb.catalog.h2.H2Support.tagvName";
CREATE ALIAS IF NOT EXISTS TAGKNAME FOR "net.opentsdb.catalog.h2.H2Support.tagkName";
CREATE ALIAS IF NOT EXISTS METRICNAME FOR "net.opentsdb.catalog.h2.H2Support.metricName";

CREATE ALIAS IF NOT EXISTS TAGVUID FOR "net.opentsdb.catalog.h2.H2Support.tagvUid";
CREATE ALIAS IF NOT EXISTS TAGKUID FOR "net.opentsdb.catalog.h2.H2Support.tagkUid";
CREATE ALIAS IF NOT EXISTS METRICUID FOR "net.opentsdb.catalog.h2.H2Support.metricUid";

CREATE ALIAS IF NOT EXISTS TAGPAIRN FOR "net.opentsdb.catalog.h2.H2Support.tagPairUidByName";
CREATE ALIAS IF NOT EXISTS TAGPAIRU FOR "net.opentsdb.catalog.h2.H2Support.tagPairUidByNames";

CREATE ALIAS IF NOT EXISTS TAGPAIRKEY FOR "net.opentsdb.catalog.h2.H2Support.tagPairKeyNameByUid";
CREATE ALIAS IF NOT EXISTS TAGPAIRVALUE FOR "net.opentsdb.catalog.h2.H2Support.tagPairValueNameByUid";

CREATE ALIAS IF NOT EXISTS JSONGET FOR "net.opentsdb.catalog.h2.H2Support.jsonGet";
CREATE ALIAS IF NOT EXISTS JSONKEYS FOR "net.opentsdb.catalog.h2.H2Support.jsonKeys";
CREATE ALIAS IF NOT EXISTS JSONVALUES FOR "net.opentsdb.catalog.h2.H2Support.jsonValues";
CREATE ALIAS IF NOT EXISTS JSONPAIRS FOR "net.opentsdb.catalog.h2.H2Support.jsonPairs";





