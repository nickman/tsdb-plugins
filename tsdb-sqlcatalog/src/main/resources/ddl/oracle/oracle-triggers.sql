--=================================================================
--	TSD_METRIC
--=================================================================

create or replace TRIGGER TSD_METRIC_UPDATED_TRG 
BEFORE DELETE OR INSERT OR UPDATE ON TSD_METRIC 
REFERENCING OLD AS OLD NEW AS NEW 
FOR EACH ROW 

DECLARE
  EQ BOOLEAN;
  TG_TABLE_NAME VARCHAR2(30) := 'TSD_METRIC';
BEGIN
  IF tsdb_support.is_sqprocessor() THEN
		RETURN;
	END IF;
	EQ := tsdb_support.is_eqprocessor();
	CASE 
  WHEN INSERTING THEN
		IF EQ != true THEN
			IF :NEW.VERSION IS NULL THEN
				:NEW.VERSION := 1;
			ELSE
				:NEW.VERSION := :NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:NEW.XUID,'I');
	WHEN DELETING THEN
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:OLD.XUID,'D');
	WHEN UPDATING THEN
		IF EQ != true THEN
			IF :NEW.VERSION IS NULL THEN
				:NEW.VERSION := 1;
			ELSE
				:NEW.VERSION := :NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:NEW.XUID,'U');
	END CASE;
END;

--=================================================================
--	TSD_TAGK
--=================================================================

create or replace TRIGGER TSD_TAGK_UPDATED_TRG 
BEFORE DELETE OR INSERT OR UPDATE ON TSD_TAGK 
REFERENCING OLD AS OLD NEW AS NEW 
FOR EACH ROW 

DECLARE
  EQ BOOLEAN;
  TG_TABLE_NAME VARCHAR2(30) := 'TSD_TAGK';
BEGIN
  IF tsdb_support.is_sqprocessor() THEN
		RETURN;
	END IF;
	EQ := tsdb_support.is_eqprocessor();
	CASE 
  WHEN INSERTING THEN
		IF EQ != true THEN
			IF :NEW.VERSION IS NULL THEN
				:NEW.VERSION := 1;
			ELSE
				:NEW.VERSION := :NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:NEW.XUID,'I');
	WHEN DELETING THEN
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:OLD.XUID,'D');
	WHEN UPDATING THEN
		IF EQ != true THEN
			IF :NEW.VERSION IS NULL THEN
				:NEW.VERSION := 1;
			ELSE
				:NEW.VERSION := :NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:NEW.XUID,'U');
	END CASE;
END;

--=================================================================
--	TSD_TAGV
--=================================================================

create or replace TRIGGER TSD_TAGV_UPDATED_TRG 
BEFORE DELETE OR INSERT OR UPDATE ON TSD_TAGV 
REFERENCING OLD AS OLD NEW AS NEW 
FOR EACH ROW 

DECLARE
  EQ BOOLEAN;
  TG_TABLE_NAME VARCHAR2(30) := 'TSD_TAGV';
BEGIN
  IF tsdb_support.is_sqprocessor() THEN
		RETURN;
	END IF;
	EQ := tsdb_support.is_eqprocessor();
	CASE 
  WHEN INSERTING THEN
		IF EQ != true THEN
			IF :NEW.VERSION IS NULL THEN
				:NEW.VERSION := 1;
			ELSE
				:NEW.VERSION := :NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:NEW.XUID,'I');
	WHEN DELETING THEN
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:OLD.XUID,'D');
	WHEN UPDATING THEN
		IF EQ != true THEN
			IF :NEW.VERSION IS NULL THEN
				:NEW.VERSION := 1;
			ELSE
				:NEW.VERSION := :NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:NEW.XUID,'U');
	END CASE;
END;

--=================================================================
--	TSD_ANNOTATION
--=================================================================

create or replace TRIGGER TSD_ANNOTATION_UPDATED_TRG 
BEFORE DELETE OR INSERT OR UPDATE ON TSD_ANNOTATION 
REFERENCING OLD AS OLD NEW AS NEW 
FOR EACH ROW 

DECLARE
  EQ BOOLEAN;
  TG_TABLE_NAME VARCHAR2(30) := 'TSD_ANNOTATION';
BEGIN
  IF tsdb_support.is_sqprocessor() THEN
		RETURN;
	END IF;
	EQ := tsdb_support.is_eqprocessor();
	CASE 
  WHEN INSERTING THEN
		IF EQ != true THEN
			IF :NEW.VERSION IS NULL THEN
				:NEW.VERSION := 1;
			ELSE
				:NEW.VERSION := :NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:NEW.ANNID,'I');
	WHEN DELETING THEN
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:OLD.ANNID,'D');
	WHEN UPDATING THEN
		IF EQ != true THEN
			IF :NEW.VERSION IS NULL THEN
				:NEW.VERSION := 1;
			ELSE
				:NEW.VERSION := :NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:NEW.ANNID,'U');
	END CASE;
END;

--=================================================================
--	TSD_TSMETA
--=================================================================

create or replace TRIGGER TSD_TSMETA_UPDATED_TRG 
BEFORE DELETE OR INSERT OR UPDATE ON TSD_TSMETA 
REFERENCING OLD AS OLD NEW AS NEW 
FOR EACH ROW 

DECLARE
  EQ BOOLEAN;
  TG_TABLE_NAME VARCHAR2(30) := 'TSD_TSMETA';
BEGIN
  IF tsdb_support.is_sqprocessor() THEN
		RETURN;
	END IF;
	EQ := tsdb_support.is_eqprocessor();
	CASE 
  WHEN INSERTING THEN
		IF EQ != true THEN
			IF :NEW.VERSION IS NULL THEN
				:NEW.VERSION := 1;
			ELSE
				:NEW.VERSION := :NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:NEW.FQNID,'I');
	WHEN DELETING THEN
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:OLD.FQNID,'D');
	WHEN UPDATING THEN
		IF EQ != true THEN
			IF :NEW.VERSION IS NULL THEN
				:NEW.VERSION := 1;
			ELSE
				:NEW.VERSION := :NEW.VERSION +1;
			END IF;
		END IF;
		INSERT INTO SYNC_QUEUE (QID, EVENT_TYPE, EVENT, OP_TYPE) VALUES (QID_SEQ.NEXTVAL, UPPER(TG_TABLE_NAME),:NEW.FQNID,'U');
	END CASE;
END;

